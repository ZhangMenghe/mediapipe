type: "MakeSureEarLeftSubgraph"

input_stream: "IMAGE:normalized_cpu"
output_stream: "IMAGE:normalized_cpu_left"
output_stream: "EAR_FLIPPED:ear_flipped"

node: {
  calculator: "ImageFrameToGpuBufferCalculator"
  input_stream: "normalized_cpu"
  output_stream: "normalized_gpu"
}

# node: {
#   calculator: "ImageTransformationCalculator"
#   # input_stream: "IMAGE_GPU:ear_image"
#   input_stream: "IMAGE_GPU:normalized_gpu"
#   output_stream: "IMAGE_GPU:transformed_gpu"
#   #output_stream: "LETTERBOX_PADDING:letterbox_padding"
#   node_options: {
#     [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
#       output_width: 96
#       output_height: 96
#       scale_mode: FIT
#     }
#   }
# }

# Converts the transformed input image on GPU into an image tensor stored as a
# TfLiteTensor.
node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE_GPU:normalized_gpu"
  # input_stream: "IMAGE:normalized_cpu"
  output_stream: "TENSORS_GPU:image_tensor"
  # output_stream: "TENSORS:image_tensor"

  node_options: {
    [type.googleapis.com/mediapipe.TfLiteConverterCalculatorOptions] {
      zero_center: false
    }
  }
}

# Generates a single side packet containing a TensorFlow Lite op resolver that
# supports custom ops needed by the model used in this graph.
node {
  calculator: "TfLiteCustomOpResolverCalculator"
  output_side_packet: "op_resolver"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteCustomOpResolverCalculatorOptions] {
      use_gpu: true
      # use_gpu: false

    }
  }
}
# Runs a TensorFlow Lite model on GPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS_GPU:image_tensor"
  # input_stream: "TENSORS:image_tensor"

  output_stream: "TENSORS:output_tensors"
  input_side_packet: "CUSTOM_OP_RESOLVER:op_resolver"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path:"mediapipe/models/ear-landmarks_saved_model/model-side.tflite"
      use_gpu: true
      # use_gpu: false
    }
  }
}
node {
  calculator: "TfLiteTensorsToFlippedEar"
  input_stream: "normalized_cpu"
  input_stream: "TENSORS:output_tensors"
  output_stream: "normalized_cpu_left"
  output_stream: "EAR_FLIPPED:ear_flipped"
}
