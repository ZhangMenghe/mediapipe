# MediaPipe ear landmark localization subgraph.

type: "MultiEarLandmarksSubgraph"

input_stream: "IMAGE:input_video"
# A vector of NormalizedRect, one per each ear detected.
input_stream: "NORM_RECTS:multi_ear_rects"
# A vector of NormalizedLandmarks, one set per each ear.
output_stream: "LANDMARKS:filtered_multi_ear_landmarks"
# A vector of NormalizedRect, one per each ear.
output_stream: "NORM_RECTS:filtered_multi_ear_rects_for_next_frame"

# Outputs each element of multi_ear_rects at a fake timestamp for the rest
# of the graph to process. Clones the input_video packet for each
# single_ear_rect at the fake timestamp. At the end of the loop,
# outputs the BATCH_END timestamp for downstream calculators to inform them
# that all elements in the vector have been processed.
node {
  calculator: "BeginLoopNormalizedRectCalculator"
  input_stream: "ITERABLE:multi_ear_rects"
  input_stream: "CLONE:input_video"
  output_stream: "ITEM:single_ear_rect"
  output_stream: "CLONE:input_video_cloned"
  output_stream: "BATCH_END:single_ear_rect_timestamp"
}

node {
  calculator: "EarLandmarkSubgraph"
  input_stream: "IMAGE_GPU:input_video_cloned"
  input_stream: "NORM_RECT:single_ear_rect"
  output_stream: "LANDMARKS:single_ear_landmarks"
  output_stream: "NORM_RECT_EAR:single_ear_rect_from_landmarks"
  output_stream: "PRESENCE:single_ear_presence"
}

# Collects the boolean presence value for each single ear into a vector. Upon
# receiving the BATCH_END timestamp, outputs a vector of boolean values at the
# BATCH_END timestamp.
node {
  calculator: "EndLoopBooleanCalculator"
  input_stream: "ITEM:single_ear_presence"
  input_stream: "BATCH_END:single_ear_rect_timestamp"
  output_stream: "ITERABLE:multi_ear_presence"
}

# Collects a set of landmarks for each ear into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of landmarks at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:single_ear_landmarks"
  input_stream: "BATCH_END:single_ear_rect_timestamp"
  output_stream: "ITERABLE:multi_ear_landmarks"
}

# Collects a NormalizedRect for each ear into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of NormalizedRect at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopNormalizedRectCalculator"
  input_stream: "ITEM:single_ear_rect_from_landmarks"
  input_stream: "BATCH_END:single_ear_rect_timestamp"
  output_stream: "ITERABLE:multi_ear_rects_for_next_frame"
}

# Filters the input vector of landmarks based on ear presence value for each
# ear. If the ear presence for ear #i is false, the set of landmarks
# corresponding to that ear are dropped from the vector.
node {
  calculator: "FilterLandmarkListCollectionCalculator"
  input_stream: "ITERABLE:multi_ear_landmarks"
  input_stream: "CONDITION:multi_ear_presence"
  output_stream: "ITERABLE:filtered_multi_ear_landmarks"
}

# Filters the input vector of NormalizedRect based on ear presence value for
# each ear. If the ear presence for ear #i is false, the NormalizedRect
# corresponding to that ear are dropped from the vector.
node {
  calculator: "FilterNormalizedRectCollectionCalculator"
  input_stream: "ITERABLE:multi_ear_rects_for_next_frame"
  input_stream: "CONDITION:multi_ear_presence"
  output_stream: "ITERABLE:filtered_multi_ear_rects_for_next_frame"
}
